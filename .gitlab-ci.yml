stages:
  - build
  - deploy

variables:
  IMAGE_TAG: $CI_COMMIT_SHORT_SHA
  REGION: $AWS_REGION
  CLUSTER: $ECS_CLUSTER_NAME
  ECR_REGISTRY: 471112510011.dkr.ecr.us-east-2.amazonaws.com  # update if needed

# ===============================
# Build Backend with Kaniko
# ===============================
build-backend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR/Backend
      --dockerfile $CI_PROJECT_DIR/Backend/Dockerfile
      --destination $ECR_REPO_BACKEND:$IMAGE_TAG
      --destination $ECR_REPO_BACKEND:latest
      --reproducible
      --no-push-cache
      --insecure
      --insecure-pull
      --skip-tls-verify
  only:
    variables:
      - $DEPLOY_ENV == "production"
    changes:
      - Backend/**/*
      - .gitlab-ci.yml

# ===============================
# Build Frontend with Kaniko
# ===============================
build-frontend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - >
      /kaniko/executor
      --context $CI_PROJECT_DIR/iinspire-app
      --dockerfile $CI_PROJECT_DIR/iinspire-app/Dockerfile
      --destination $ECR_REPO_FRONTEND:$IMAGE_TAG
      --destination $ECR_REPO_FRONTEND:latest
      --reproducible
      --no-push-cache
      --insecure
      --insecure-pull
      --skip-tls-verify
  only:
    variables:
      - $DEPLOY_ENV == "production"
    changes:
      - iinspire-app/**/*
      - .gitlab-ci.yml


# ===============================
# Deploy Backend to ECS
# ===============================
deploy-backend:
  stage: deploy
  image: amazonlinux:2
  before_script:
    - yum install -y unzip curl jq
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
  script:
    - echo "Fetching current task definition for backend..."
    - >
      TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_BACKEND --region $AWS_REGION)
    - echo "Modifying task definition with new image..."
    - >
      NEW_TASK_DEF=$(echo $TASK_DEF | jq '.taskDefinition' |
        jq 'del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' |
        jq --arg IMAGE "$ECR_REPO_BACKEND:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE')
    - echo "$NEW_TASK_DEF" > new-task-def-backend.json
    - echo "Registering new task definition..."
    - >
      REGISTERED=$(aws ecs register-task-definition --cli-input-json file://new-task-def-backend.json --region $AWS_REGION)
    - >
      NEW_REVISION=$(echo $REGISTERED | jq -r '.taskDefinition.revision')
    - echo "Updating ECS service to use task revision $NEW_REVISION"
    - >
      aws ecs update-service \
        --cluster $ECS_CLUSTER_NAME \
        --service $ECS_SERVICE_BACKEND \
        --task-definition $TASK_DEF_BACKEND:$NEW_REVISION \
        --health-check-grace-period-seconds 60 \
        --force-new-deployment \
        --region $AWS_REGION
  only:
    variables:
      - $DEPLOY_ENV == "production"
    changes:
      - Backend/**/*
      - .gitlab-ci.yml
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY



# ===============================
# Deploy Frontend to ECS
# ===============================
deploy-frontend:
  stage: deploy
  image: amazonlinux:2
  before_script:
    - yum install -y unzip curl jq
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
  script:
    - echo "Fetching current task definition for frontend..."
    - >
      TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_FRONTEND --region $AWS_REGION)
    - echo "Modifying task definition with new image..."
    - >
      NEW_TASK_DEF=$(echo $TASK_DEF | jq '.taskDefinition' |
        jq 'del(.status, .revision, .taskDefinitionArn, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)' |
        jq --arg IMAGE "$ECR_REPO_FRONTEND:$IMAGE_TAG" '.containerDefinitions[0].image = $IMAGE')
    - echo "$NEW_TASK_DEF" > new-task-def-frontend.json
    - echo "Registering new task definition..."
    - >
      REGISTERED=$(aws ecs register-task-definition --cli-input-json file://new-task-def-frontend.json --region $AWS_REGION)
    - >
      NEW_REVISION=$(echo $REGISTERED | jq -r '.taskDefinition.revision')
    - echo "Updating ECS service to use frontend-task revision $NEW_REVISION"
    - >
      aws ecs update-service \
        --cluster $ECS_CLUSTER_NAME \
        --service $ECS_SERVICE_FRONTEND \
        --task-definition frontend-task:$NEW_REVISION \
        --health-check-grace-period-seconds 60 \
        --force-new-deployment \
        --region $AWS_REGION
  only: 
    variables:
      - $DEPLOY_ENV == "production"
    changes:
      - iinspire-app/**/*
      - .gitlab-ci.yml
  variables:
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY



