image: alpine:latest

services:
  - name: moby/buildkit:latest
    alias: buildkitd

variables:
  BUILDKIT_HOST: unix:///run/buildkit/buildkitd.sock
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"

stages:
  - build
  - deploy

before_script:
  - apk add --no-cache bash curl jq tar python3 py3-pip
  - python3 -m venv /tmp/venv
  - . /tmp/venv/bin/activate
  - pip install awscli

  # install latest buildctl from GitHub
  - VERSION=$(curl -s https://api.github.com/repos/moby/buildkit/releases/latest | jq -r .tag_name)
  - curl -LO https://github.com/moby/buildkit/releases/download/${VERSION}/buildkit-${VERSION}.linux-amd64.tar.gz
  - tar -xvf buildkit-${VERSION}.linux-amd64.tar.gz
  - mv bin/buildctl /usr/local/bin/buildctl
  - chmod +x /usr/local/bin/buildctl

  # export AWS credentials (already passed as env vars)
  - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
  - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
  - export AWS_REGION=$AWS_REGION

# -----------------------------
# Build Backend
# -----------------------------
build-backend:
  stage: build
  script:
    - echo "Building Backend with BuildKit..."
    - |
      buildctl --addr unix:///run/buildkit/buildkitd.sock build \
        --frontend dockerfile.v0 \
        --local context=./Backend \
        --local dockerfile=./Backend \
        --output type=image,name=$ECR_REPO_BACKEND:latest,push=true
    - |
      buildctl --addr unix:///run/buildkit/buildkitd.sock build \
        --frontend dockerfile.v0 \
        --local context=./Backend \
        --local dockerfile=./Backend \
        --output type=image,name=$ECR_REPO_BACKEND:$IMAGE_TAG,push=true
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

# -----------------------------
# Build Frontend
# -----------------------------
build-frontend:
  stage: build
  script:
    - echo "Building Frontend with BuildKit..."
    - |
      buildctl --addr unix:///run/buildkit/buildkitd.sock build \
        --frontend dockerfile.v0 \
        --local context=./iinspire-app \
        --local dockerfile=./iinspire-app \
        --output type=image,name=$ECR_REPO_FRONTEND:latest,push=true
    - |
      buildctl --addr unix:///run/buildkit/buildkitd.sock build \
        --frontend dockerfile.v0 \
        --local context=./iinspire-app \
        --local dockerfile=./iinspire-app \
        --output type=image,name=$ECR_REPO_FRONTEND:$IMAGE_TAG,push=true
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

# -----------------------------
# Deploy Backend
# -----------------------------
deploy-backend:
  stage: deploy
  script:
    - . /tmp/venv/bin/activate
    - echo "Updating ECS Backend Service..."
    - TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_BACKEND)
    - NEW_DEF=$(echo $TASK_DEF | jq --arg IMG "$ECR_REPO_BACKEND:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMG | .taskDefinition.containerDefinitions')
    - aws ecs register-task-definition --family $TASK_DEF_BACKEND --container-definitions "$NEW_DEF"
    - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_BACKEND --region $AWS_REGION --force-new-deployment
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

# -----------------------------
# Deploy Frontend
# -----------------------------
deploy-frontend:
  stage: deploy
  script:
    - . /tmp/venv/bin/activate
    - echo "Updating ECS Frontend Service..."
    - TASK_DEF=$(aws ecs describe-task-definition --task-definition $TASK_DEF_FRONTEND)
    - NEW_DEF=$(echo $TASK_DEF | jq --arg IMG "$ECR_REPO_FRONTEND:$IMAGE_TAG" '.taskDefinition.containerDefinitions[0].image = $IMG | .taskDefinition.containerDefinitions')
    - aws ecs register-task-definition --family $TASK_DEF_FRONTEND --container-definitions "$NEW_DEF"
    - aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_FRONTEND --region $AWS_REGION --force-new-deployment
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
