
image: docker:23.0.1

services:
  - name: docker:23.0.1-dind
    alias: docker

    command: ["--tls=false", "--host=tcp://0.0.0.0:2375", "--storage-driver=overlay2"]

stages:
  - build
  - deploy

variables:
  DOCKER_HOST: "tcp://docker:2375"
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""

before_script:
  - apk add --no-cache python3 py3-pip aws-cli
  - aws --version
  - >
    aws ecr get-login-password --region "$AWS_REGION" |
    docker login --username AWS --password-stdin "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"

# ------------------------------
# BUILD & PUSH IMAGES
# ------------------------------
build-and-push:
  stage: build
  script:
    # Build the backend image from ./Backend
    - docker build -t "$ECR_REPO_BACKEND:$CI_COMMIT_SHA" ./Backend

    # Build the frontend image from ./inspire-app
    - docker build -t "$ECR_REPO_FRONTEND:$CI_COMMIT_SHA" ./inspire-app

    # Push both images to ECR (tagged with the Git commit SHA)
    - docker push "$ECR_REPO_BACKEND:$CI_COMMIT_SHA"
    - docker push "$ECR_REPO_FRONTEND:$CI_COMMIT_SHA"
  only:
    - master

# ------------------------------
# DEPLOY TO ECS
# ------------------------------
deploy-ecs:
  stage: deploy
  script:
    - docker tag "$ECR_REPO_BACKEND:$CI_COMMIT_SHA" "$ECR_REPO_BACKEND:latest"
    - docker tag "$ECR_REPO_FRONTEND:$CI_COMMIT_SHA" "$ECR_REPO_FRONTEND:latest"
    - docker push "$ECR_REPO_BACKEND:latest"
    - docker push "$ECR_REPO_FRONTEND:latest"

    # Force ECS to pull the new images
    - >
      aws ecs update-service \
        --cluster "$ECS_CLUSTER_NAME" \
        --service "$ECS_SERVICE_BACKEND" \
        --force-new-deployment \
        --region "$AWS_REGION"
    - >
      aws ecs update-service \
        --cluster "$ECS_CLUSTER_NAME" \
        --service "$ECS_SERVICE_FRONTEND" \
        --force-new-deployment \
        --region "$AWS_REGION"
  only:
    - master
  needs:
    - build-and-push
